package com.dasannetworks.vn.sb.model.impl;

import com.dasannetworks.vn.sb.model.Customer;
import com.dasannetworks.vn.sb.model.CustomerModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;tms_Customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dasannetworks.vn.sb.model.CustomerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerImpl
 * @see com.dasannetworks.vn.sb.model.Customer
 * @see com.dasannetworks.vn.sb.model.CustomerModel
 * @generated
 */
public class CustomerModelImpl extends BaseModelImpl<Customer>
    implements CustomerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a customer model instance should use the {@link com.dasannetworks.vn.sb.model.Customer} interface instead.
     */
    public static final String TABLE_NAME = "tms_Customer";
    public static final Object[][] TABLE_COLUMNS = {
            { "customerId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "customerCode", Types.VARCHAR },
            { "customerName", Types.VARCHAR },
            { "inCharge", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "phone", Types.VARCHAR },
            { "address", Types.VARCHAR },
            { "parentId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table tms_Customer (customerId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customerCode VARCHAR(75) null,customerName VARCHAR(75) null,inCharge VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,address VARCHAR(75) null,parentId LONG)";
    public static final String TABLE_SQL_DROP = "drop table tms_Customer";
    public static final String ORDER_BY_JPQL = " ORDER BY customer.customerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY tms_Customer.customerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.dasannetworks.vn.sb.model.Customer"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.dasannetworks.vn.sb.model.Customer"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.dasannetworks.vn.sb.model.Customer"),
            true);
    public static long CUSTOMERCODE_COLUMN_BITMASK = 1L;
    public static long PARENTID_COLUMN_BITMASK = 2L;
    public static long CUSTOMERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.dasannetworks.vn.sb.model.Customer"));
    private static ClassLoader _classLoader = Customer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Customer.class
        };
    private long _customerId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _customerCode;
    private String _originalCustomerCode;
    private String _customerName;
    private String _inCharge;
    private String _email;
    private String _phone;
    private String _address;
    private Long _parentId;
    private Long _originalParentId;
    private boolean _setOriginalParentId;
    private long _columnBitmask;
    private Customer _escapedModel;

    public CustomerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _customerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setCustomerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _customerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Customer.class;
    }

    @Override
    public String getModelClassName() {
        return Customer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("customerId", getCustomerId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("customerCode", getCustomerCode());
        attributes.put("customerName", getCustomerName());
        attributes.put("inCharge", getInCharge());
        attributes.put("email", getEmail());
        attributes.put("phone", getPhone());
        attributes.put("address", getAddress());
        attributes.put("parentId", getParentId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long customerId = (Long) attributes.get("customerId");

        if (customerId != null) {
            setCustomerId(customerId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String customerCode = (String) attributes.get("customerCode");

        if (customerCode != null) {
            setCustomerCode(customerCode);
        }

        String customerName = (String) attributes.get("customerName");

        if (customerName != null) {
            setCustomerName(customerName);
        }

        String inCharge = (String) attributes.get("inCharge");

        if (inCharge != null) {
            setInCharge(inCharge);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String phone = (String) attributes.get("phone");

        if (phone != null) {
            setPhone(phone);
        }

        String address = (String) attributes.get("address");

        if (address != null) {
            setAddress(address);
        }

        Long parentId = (Long) attributes.get("parentId");

        if (parentId != null) {
            setParentId(parentId);
        }
    }

    @Override
    public long getCustomerId() {
        return _customerId;
    }

    @Override
    public void setCustomerId(long customerId) {
        _customerId = customerId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getCustomerCode() {
        if (_customerCode == null) {
            return StringPool.BLANK;
        } else {
            return _customerCode;
        }
    }

    @Override
    public void setCustomerCode(String customerCode) {
        _columnBitmask |= CUSTOMERCODE_COLUMN_BITMASK;

        if (_originalCustomerCode == null) {
            _originalCustomerCode = _customerCode;
        }

        _customerCode = customerCode;
    }

    public String getOriginalCustomerCode() {
        return GetterUtil.getString(_originalCustomerCode);
    }

    @Override
    public String getCustomerName() {
        if (_customerName == null) {
            return StringPool.BLANK;
        } else {
            return _customerName;
        }
    }

    @Override
    public void setCustomerName(String customerName) {
        _customerName = customerName;
    }

    @Override
    public String getInCharge() {
        if (_inCharge == null) {
            return StringPool.BLANK;
        } else {
            return _inCharge;
        }
    }

    @Override
    public void setInCharge(String inCharge) {
        _inCharge = inCharge;
    }

    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @Override
    public String getPhone() {
        if (_phone == null) {
            return StringPool.BLANK;
        } else {
            return _phone;
        }
    }

    @Override
    public void setPhone(String phone) {
        _phone = phone;
    }

    @Override
    public String getAddress() {
        if (_address == null) {
            return StringPool.BLANK;
        } else {
            return _address;
        }
    }

    @Override
    public void setAddress(String address) {
        _address = address;
    }

    @Override
    public Long getParentId() {
        return _parentId;
    }

    @Override
    public void setParentId(Long parentId) {
        _columnBitmask |= PARENTID_COLUMN_BITMASK;

        if (!_setOriginalParentId) {
            _setOriginalParentId = true;

            _originalParentId = _parentId;
        }

        _parentId = parentId;
    }

    public Long getOriginalParentId() {
        return _originalParentId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Customer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Customer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Customer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        CustomerImpl customerImpl = new CustomerImpl();

        customerImpl.setCustomerId(getCustomerId());
        customerImpl.setCompanyId(getCompanyId());
        customerImpl.setUserId(getUserId());
        customerImpl.setUserName(getUserName());
        customerImpl.setCreateDate(getCreateDate());
        customerImpl.setModifiedDate(getModifiedDate());
        customerImpl.setCustomerCode(getCustomerCode());
        customerImpl.setCustomerName(getCustomerName());
        customerImpl.setInCharge(getInCharge());
        customerImpl.setEmail(getEmail());
        customerImpl.setPhone(getPhone());
        customerImpl.setAddress(getAddress());
        customerImpl.setParentId(getParentId());

        customerImpl.resetOriginalValues();

        return customerImpl;
    }

    @Override
    public int compareTo(Customer customer) {
        long primaryKey = customer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Customer)) {
            return false;
        }

        Customer customer = (Customer) obj;

        long primaryKey = customer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        CustomerModelImpl customerModelImpl = this;

        customerModelImpl._originalCustomerCode = customerModelImpl._customerCode;

        customerModelImpl._originalParentId = customerModelImpl._parentId;

        customerModelImpl._setOriginalParentId = false;

        customerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Customer> toCacheModel() {
        CustomerCacheModel customerCacheModel = new CustomerCacheModel();

        customerCacheModel.customerId = getCustomerId();

        customerCacheModel.companyId = getCompanyId();

        customerCacheModel.userId = getUserId();

        customerCacheModel.userName = getUserName();

        String userName = customerCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            customerCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            customerCacheModel.createDate = createDate.getTime();
        } else {
            customerCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            customerCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            customerCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        customerCacheModel.customerCode = getCustomerCode();

        String customerCode = customerCacheModel.customerCode;

        if ((customerCode != null) && (customerCode.length() == 0)) {
            customerCacheModel.customerCode = null;
        }

        customerCacheModel.customerName = getCustomerName();

        String customerName = customerCacheModel.customerName;

        if ((customerName != null) && (customerName.length() == 0)) {
            customerCacheModel.customerName = null;
        }

        customerCacheModel.inCharge = getInCharge();

        String inCharge = customerCacheModel.inCharge;

        if ((inCharge != null) && (inCharge.length() == 0)) {
            customerCacheModel.inCharge = null;
        }

        customerCacheModel.email = getEmail();

        String email = customerCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            customerCacheModel.email = null;
        }

        customerCacheModel.phone = getPhone();

        String phone = customerCacheModel.phone;

        if ((phone != null) && (phone.length() == 0)) {
            customerCacheModel.phone = null;
        }

        customerCacheModel.address = getAddress();

        String address = customerCacheModel.address;

        if ((address != null) && (address.length() == 0)) {
            customerCacheModel.address = null;
        }

        customerCacheModel.parentId = getParentId();

        return customerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{customerId=");
        sb.append(getCustomerId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", customerCode=");
        sb.append(getCustomerCode());
        sb.append(", customerName=");
        sb.append(getCustomerName());
        sb.append(", inCharge=");
        sb.append(getInCharge());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", phone=");
        sb.append(getPhone());
        sb.append(", address=");
        sb.append(getAddress());
        sb.append(", parentId=");
        sb.append(getParentId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.dasannetworks.vn.sb.model.Customer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>customerId</column-name><column-value><![CDATA[");
        sb.append(getCustomerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerCode</column-name><column-value><![CDATA[");
        sb.append(getCustomerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerName</column-name><column-value><![CDATA[");
        sb.append(getCustomerName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>inCharge</column-name><column-value><![CDATA[");
        sb.append(getInCharge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phone</column-name><column-value><![CDATA[");
        sb.append(getPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>address</column-name><column-value><![CDATA[");
        sb.append(getAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>parentId</column-name><column-value><![CDATA[");
        sb.append(getParentId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
