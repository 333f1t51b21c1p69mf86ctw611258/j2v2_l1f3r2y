package com.dasannetworks.vn.sb.model.impl;

import com.dasannetworks.vn.sb.model.HandOverForm;
import com.dasannetworks.vn.sb.model.HandOverFormModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the HandOverForm service. Represents a row in the &quot;tms_HandOverForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dasannetworks.vn.sb.model.HandOverFormModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HandOverFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HandOverFormImpl
 * @see com.dasannetworks.vn.sb.model.HandOverForm
 * @see com.dasannetworks.vn.sb.model.HandOverFormModel
 * @generated
 */
public class HandOverFormModelImpl extends BaseModelImpl<HandOverForm>
    implements HandOverFormModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a hand over form model instance should use the {@link com.dasannetworks.vn.sb.model.HandOverForm} interface instead.
     */
    public static final String TABLE_NAME = "tms_HandOverForm";
    public static final Object[][] TABLE_COLUMNS = {
            { "uuid_", Types.VARCHAR },
            { "handOverFormId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "groupId", Types.BIGINT },
            { "customerCode", Types.VARCHAR },
            { "contactPoint", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "phone", Types.VARCHAR },
            { "location", Types.VARCHAR },
            { "personInCharge", Types.VARCHAR },
            { "handOverFormNumber", Types.VARCHAR },
            { "note", Types.VARCHAR },
            { "assignDate", Types.TIMESTAMP },
            { "estimatedReturnDate", Types.TIMESTAMP },
            { "status", Types.INTEGER },
            { "statusByUserId", Types.BIGINT },
            { "statusDate", Types.TIMESTAMP },
            { "testId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table tms_HandOverForm (uuid_ VARCHAR(75) null,handOverFormId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,groupId LONG,customerCode VARCHAR(75) null,contactPoint VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,location VARCHAR(75) null,personInCharge VARCHAR(75) null,handOverFormNumber VARCHAR(75) null,note VARCHAR(75) null,assignDate DATE null,estimatedReturnDate DATE null,status INTEGER,statusByUserId LONG,statusDate DATE null,testId LONG)";
    public static final String TABLE_SQL_DROP = "drop table tms_HandOverForm";
    public static final String ORDER_BY_JPQL = " ORDER BY handOverForm.handOverFormId ASC, handOverForm.modifiedDate DESC";
    public static final String ORDER_BY_SQL = " ORDER BY tms_HandOverForm.handOverFormId ASC, tms_HandOverForm.modifiedDate DESC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.dasannetworks.vn.sb.model.HandOverForm"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.dasannetworks.vn.sb.model.HandOverForm"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.dasannetworks.vn.sb.model.HandOverForm"),
            true);
    public static long COMPANYID_COLUMN_BITMASK = 1L;
    public static long CUSTOMERCODE_COLUMN_BITMASK = 2L;
    public static long GROUPID_COLUMN_BITMASK = 4L;
    public static long HANDOVERFORMNUMBER_COLUMN_BITMASK = 8L;
    public static long STATUS_COLUMN_BITMASK = 16L;
    public static long UUID_COLUMN_BITMASK = 32L;
    public static long HANDOVERFORMID_COLUMN_BITMASK = 64L;
    public static long MODIFIEDDATE_COLUMN_BITMASK = 128L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.dasannetworks.vn.sb.model.HandOverForm"));
    private static ClassLoader _classLoader = HandOverForm.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            HandOverForm.class
        };
    private String _uuid;
    private String _originalUuid;
    private long _handOverFormId;
    private long _companyId;
    private long _originalCompanyId;
    private boolean _setOriginalCompanyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private long _groupId;
    private long _originalGroupId;
    private boolean _setOriginalGroupId;
    private String _customerCode;
    private String _originalCustomerCode;
    private String _contactPoint;
    private String _email;
    private String _phone;
    private String _location;
    private String _personInCharge;
    private String _handOverFormNumber;
    private String _originalHandOverFormNumber;
    private String _note;
    private Date _assignDate;
    private Date _estimatedReturnDate;
    private int _status;
    private int _originalStatus;
    private boolean _setOriginalStatus;
    private long _statusByUserId;
    private String _statusByUserUuid;
    private Date _statusDate;
    private long _testId;
    private long _columnBitmask;
    private HandOverForm _escapedModel;

    public HandOverFormModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _handOverFormId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setHandOverFormId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _handOverFormId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return HandOverForm.class;
    }

    @Override
    public String getModelClassName() {
        return HandOverForm.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("uuid", getUuid());
        attributes.put("handOverFormId", getHandOverFormId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("groupId", getGroupId());
        attributes.put("customerCode", getCustomerCode());
        attributes.put("contactPoint", getContactPoint());
        attributes.put("email", getEmail());
        attributes.put("phone", getPhone());
        attributes.put("location", getLocation());
        attributes.put("personInCharge", getPersonInCharge());
        attributes.put("handOverFormNumber", getHandOverFormNumber());
        attributes.put("note", getNote());
        attributes.put("assignDate", getAssignDate());
        attributes.put("estimatedReturnDate", getEstimatedReturnDate());
        attributes.put("status", getStatus());
        attributes.put("statusByUserId", getStatusByUserId());
        attributes.put("statusDate", getStatusDate());
        attributes.put("testId", getTestId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String uuid = (String) attributes.get("uuid");

        if (uuid != null) {
            setUuid(uuid);
        }

        Long handOverFormId = (Long) attributes.get("handOverFormId");

        if (handOverFormId != null) {
            setHandOverFormId(handOverFormId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        String customerCode = (String) attributes.get("customerCode");

        if (customerCode != null) {
            setCustomerCode(customerCode);
        }

        String contactPoint = (String) attributes.get("contactPoint");

        if (contactPoint != null) {
            setContactPoint(contactPoint);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String phone = (String) attributes.get("phone");

        if (phone != null) {
            setPhone(phone);
        }

        String location = (String) attributes.get("location");

        if (location != null) {
            setLocation(location);
        }

        String personInCharge = (String) attributes.get("personInCharge");

        if (personInCharge != null) {
            setPersonInCharge(personInCharge);
        }

        String handOverFormNumber = (String) attributes.get(
                "handOverFormNumber");

        if (handOverFormNumber != null) {
            setHandOverFormNumber(handOverFormNumber);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }

        Date assignDate = (Date) attributes.get("assignDate");

        if (assignDate != null) {
            setAssignDate(assignDate);
        }

        Date estimatedReturnDate = (Date) attributes.get("estimatedReturnDate");

        if (estimatedReturnDate != null) {
            setEstimatedReturnDate(estimatedReturnDate);
        }

        Integer status = (Integer) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }

        Long statusByUserId = (Long) attributes.get("statusByUserId");

        if (statusByUserId != null) {
            setStatusByUserId(statusByUserId);
        }

        Date statusDate = (Date) attributes.get("statusDate");

        if (statusDate != null) {
            setStatusDate(statusDate);
        }

        Long testId = (Long) attributes.get("testId");

        if (testId != null) {
            setTestId(testId);
        }
    }

    @Override
    public String getUuid() {
        if (_uuid == null) {
            return StringPool.BLANK;
        } else {
            return _uuid;
        }
    }

    @Override
    public void setUuid(String uuid) {
        if (_originalUuid == null) {
            _originalUuid = _uuid;
        }

        _uuid = uuid;
    }

    public String getOriginalUuid() {
        return GetterUtil.getString(_originalUuid);
    }

    @Override
    public long getHandOverFormId() {
        return _handOverFormId;
    }

    @Override
    public void setHandOverFormId(long handOverFormId) {
        _columnBitmask = -1L;

        _handOverFormId = handOverFormId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _columnBitmask |= COMPANYID_COLUMN_BITMASK;

        if (!_setOriginalCompanyId) {
            _setOriginalCompanyId = true;

            _originalCompanyId = _companyId;
        }

        _companyId = companyId;
    }

    public long getOriginalCompanyId() {
        return _originalCompanyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _columnBitmask = -1L;

        _modifiedDate = modifiedDate;
    }

    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _columnBitmask |= GROUPID_COLUMN_BITMASK;

        if (!_setOriginalGroupId) {
            _setOriginalGroupId = true;

            _originalGroupId = _groupId;
        }

        _groupId = groupId;
    }

    public long getOriginalGroupId() {
        return _originalGroupId;
    }

    @Override
    public String getCustomerCode() {
        if (_customerCode == null) {
            return StringPool.BLANK;
        } else {
            return _customerCode;
        }
    }

    @Override
    public void setCustomerCode(String customerCode) {
        _columnBitmask |= CUSTOMERCODE_COLUMN_BITMASK;

        if (_originalCustomerCode == null) {
            _originalCustomerCode = _customerCode;
        }

        _customerCode = customerCode;
    }

    public String getOriginalCustomerCode() {
        return GetterUtil.getString(_originalCustomerCode);
    }

    @Override
    public String getContactPoint() {
        if (_contactPoint == null) {
            return StringPool.BLANK;
        } else {
            return _contactPoint;
        }
    }

    @Override
    public void setContactPoint(String contactPoint) {
        _contactPoint = contactPoint;
    }

    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @Override
    public String getPhone() {
        if (_phone == null) {
            return StringPool.BLANK;
        } else {
            return _phone;
        }
    }

    @Override
    public void setPhone(String phone) {
        _phone = phone;
    }

    @Override
    public String getLocation() {
        if (_location == null) {
            return StringPool.BLANK;
        } else {
            return _location;
        }
    }

    @Override
    public void setLocation(String location) {
        _location = location;
    }

    @Override
    public String getPersonInCharge() {
        if (_personInCharge == null) {
            return StringPool.BLANK;
        } else {
            return _personInCharge;
        }
    }

    @Override
    public void setPersonInCharge(String personInCharge) {
        _personInCharge = personInCharge;
    }

    @Override
    public String getHandOverFormNumber() {
        if (_handOverFormNumber == null) {
            return StringPool.BLANK;
        } else {
            return _handOverFormNumber;
        }
    }

    @Override
    public void setHandOverFormNumber(String handOverFormNumber) {
        _columnBitmask |= HANDOVERFORMNUMBER_COLUMN_BITMASK;

        if (_originalHandOverFormNumber == null) {
            _originalHandOverFormNumber = _handOverFormNumber;
        }

        _handOverFormNumber = handOverFormNumber;
    }

    public String getOriginalHandOverFormNumber() {
        return GetterUtil.getString(_originalHandOverFormNumber);
    }

    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @Override
    public Date getAssignDate() {
        return _assignDate;
    }

    @Override
    public void setAssignDate(Date assignDate) {
        _assignDate = assignDate;
    }

    @Override
    public Date getEstimatedReturnDate() {
        return _estimatedReturnDate;
    }

    @Override
    public void setEstimatedReturnDate(Date estimatedReturnDate) {
        _estimatedReturnDate = estimatedReturnDate;
    }

    @Override
    public int getStatus() {
        return _status;
    }

    @Override
    public void setStatus(int status) {
        _columnBitmask |= STATUS_COLUMN_BITMASK;

        if (!_setOriginalStatus) {
            _setOriginalStatus = true;

            _originalStatus = _status;
        }

        _status = status;
    }

    public int getOriginalStatus() {
        return _originalStatus;
    }

    @Override
    public long getStatusByUserId() {
        return _statusByUserId;
    }

    @Override
    public void setStatusByUserId(long statusByUserId) {
        _statusByUserId = statusByUserId;
    }

    @Override
    public String getStatusByUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getStatusByUserId(), "uuid",
            _statusByUserUuid);
    }

    @Override
    public void setStatusByUserUuid(String statusByUserUuid) {
        _statusByUserUuid = statusByUserUuid;
    }

    @Override
    public Date getStatusDate() {
        return _statusDate;
    }

    @Override
    public void setStatusDate(Date statusDate) {
        _statusDate = statusDate;
    }

    @Override
    public long getTestId() {
        return _testId;
    }

    @Override
    public void setTestId(long testId) {
        _testId = testId;
    }

    @Override
    public StagedModelType getStagedModelType() {
        return new StagedModelType(PortalUtil.getClassNameId(
                HandOverForm.class.getName()));
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            HandOverForm.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public HandOverForm toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (HandOverForm) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        HandOverFormImpl handOverFormImpl = new HandOverFormImpl();

        handOverFormImpl.setUuid(getUuid());
        handOverFormImpl.setHandOverFormId(getHandOverFormId());
        handOverFormImpl.setCompanyId(getCompanyId());
        handOverFormImpl.setUserId(getUserId());
        handOverFormImpl.setUserName(getUserName());
        handOverFormImpl.setCreateDate(getCreateDate());
        handOverFormImpl.setModifiedDate(getModifiedDate());
        handOverFormImpl.setGroupId(getGroupId());
        handOverFormImpl.setCustomerCode(getCustomerCode());
        handOverFormImpl.setContactPoint(getContactPoint());
        handOverFormImpl.setEmail(getEmail());
        handOverFormImpl.setPhone(getPhone());
        handOverFormImpl.setLocation(getLocation());
        handOverFormImpl.setPersonInCharge(getPersonInCharge());
        handOverFormImpl.setHandOverFormNumber(getHandOverFormNumber());
        handOverFormImpl.setNote(getNote());
        handOverFormImpl.setAssignDate(getAssignDate());
        handOverFormImpl.setEstimatedReturnDate(getEstimatedReturnDate());
        handOverFormImpl.setStatus(getStatus());
        handOverFormImpl.setStatusByUserId(getStatusByUserId());
        handOverFormImpl.setStatusDate(getStatusDate());
        handOverFormImpl.setTestId(getTestId());

        handOverFormImpl.resetOriginalValues();

        return handOverFormImpl;
    }

    @Override
    public int compareTo(HandOverForm handOverForm) {
        int value = 0;

        if (getHandOverFormId() < handOverForm.getHandOverFormId()) {
            value = -1;
        } else if (getHandOverFormId() > handOverForm.getHandOverFormId()) {
            value = 1;
        } else {
            value = 0;
        }

        if (value != 0) {
            return value;
        }

        value = DateUtil.compareTo(getModifiedDate(),
                handOverForm.getModifiedDate());

        value = value * -1;

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof HandOverForm)) {
            return false;
        }

        HandOverForm handOverForm = (HandOverForm) obj;

        long primaryKey = handOverForm.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        HandOverFormModelImpl handOverFormModelImpl = this;

        handOverFormModelImpl._originalUuid = handOverFormModelImpl._uuid;

        handOverFormModelImpl._originalCompanyId = handOverFormModelImpl._companyId;

        handOverFormModelImpl._setOriginalCompanyId = false;

        handOverFormModelImpl._originalGroupId = handOverFormModelImpl._groupId;

        handOverFormModelImpl._setOriginalGroupId = false;

        handOverFormModelImpl._originalCustomerCode = handOverFormModelImpl._customerCode;

        handOverFormModelImpl._originalHandOverFormNumber = handOverFormModelImpl._handOverFormNumber;

        handOverFormModelImpl._originalStatus = handOverFormModelImpl._status;

        handOverFormModelImpl._setOriginalStatus = false;

        handOverFormModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<HandOverForm> toCacheModel() {
        HandOverFormCacheModel handOverFormCacheModel = new HandOverFormCacheModel();

        handOverFormCacheModel.uuid = getUuid();

        String uuid = handOverFormCacheModel.uuid;

        if ((uuid != null) && (uuid.length() == 0)) {
            handOverFormCacheModel.uuid = null;
        }

        handOverFormCacheModel.handOverFormId = getHandOverFormId();

        handOverFormCacheModel.companyId = getCompanyId();

        handOverFormCacheModel.userId = getUserId();

        handOverFormCacheModel.userName = getUserName();

        String userName = handOverFormCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            handOverFormCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            handOverFormCacheModel.createDate = createDate.getTime();
        } else {
            handOverFormCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            handOverFormCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            handOverFormCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        handOverFormCacheModel.groupId = getGroupId();

        handOverFormCacheModel.customerCode = getCustomerCode();

        String customerCode = handOverFormCacheModel.customerCode;

        if ((customerCode != null) && (customerCode.length() == 0)) {
            handOverFormCacheModel.customerCode = null;
        }

        handOverFormCacheModel.contactPoint = getContactPoint();

        String contactPoint = handOverFormCacheModel.contactPoint;

        if ((contactPoint != null) && (contactPoint.length() == 0)) {
            handOverFormCacheModel.contactPoint = null;
        }

        handOverFormCacheModel.email = getEmail();

        String email = handOverFormCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            handOverFormCacheModel.email = null;
        }

        handOverFormCacheModel.phone = getPhone();

        String phone = handOverFormCacheModel.phone;

        if ((phone != null) && (phone.length() == 0)) {
            handOverFormCacheModel.phone = null;
        }

        handOverFormCacheModel.location = getLocation();

        String location = handOverFormCacheModel.location;

        if ((location != null) && (location.length() == 0)) {
            handOverFormCacheModel.location = null;
        }

        handOverFormCacheModel.personInCharge = getPersonInCharge();

        String personInCharge = handOverFormCacheModel.personInCharge;

        if ((personInCharge != null) && (personInCharge.length() == 0)) {
            handOverFormCacheModel.personInCharge = null;
        }

        handOverFormCacheModel.handOverFormNumber = getHandOverFormNumber();

        String handOverFormNumber = handOverFormCacheModel.handOverFormNumber;

        if ((handOverFormNumber != null) && (handOverFormNumber.length() == 0)) {
            handOverFormCacheModel.handOverFormNumber = null;
        }

        handOverFormCacheModel.note = getNote();

        String note = handOverFormCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            handOverFormCacheModel.note = null;
        }

        Date assignDate = getAssignDate();

        if (assignDate != null) {
            handOverFormCacheModel.assignDate = assignDate.getTime();
        } else {
            handOverFormCacheModel.assignDate = Long.MIN_VALUE;
        }

        Date estimatedReturnDate = getEstimatedReturnDate();

        if (estimatedReturnDate != null) {
            handOverFormCacheModel.estimatedReturnDate = estimatedReturnDate.getTime();
        } else {
            handOverFormCacheModel.estimatedReturnDate = Long.MIN_VALUE;
        }

        handOverFormCacheModel.status = getStatus();

        handOverFormCacheModel.statusByUserId = getStatusByUserId();

        Date statusDate = getStatusDate();

        if (statusDate != null) {
            handOverFormCacheModel.statusDate = statusDate.getTime();
        } else {
            handOverFormCacheModel.statusDate = Long.MIN_VALUE;
        }

        handOverFormCacheModel.testId = getTestId();

        return handOverFormCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(45);

        sb.append("{uuid=");
        sb.append(getUuid());
        sb.append(", handOverFormId=");
        sb.append(getHandOverFormId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", customerCode=");
        sb.append(getCustomerCode());
        sb.append(", contactPoint=");
        sb.append(getContactPoint());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", phone=");
        sb.append(getPhone());
        sb.append(", location=");
        sb.append(getLocation());
        sb.append(", personInCharge=");
        sb.append(getPersonInCharge());
        sb.append(", handOverFormNumber=");
        sb.append(getHandOverFormNumber());
        sb.append(", note=");
        sb.append(getNote());
        sb.append(", assignDate=");
        sb.append(getAssignDate());
        sb.append(", estimatedReturnDate=");
        sb.append(getEstimatedReturnDate());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append(", statusByUserId=");
        sb.append(getStatusByUserId());
        sb.append(", statusDate=");
        sb.append(getStatusDate());
        sb.append(", testId=");
        sb.append(getTestId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(70);

        sb.append("<model><model-name>");
        sb.append("com.dasannetworks.vn.sb.model.HandOverForm");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>uuid</column-name><column-value><![CDATA[");
        sb.append(getUuid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>handOverFormId</column-name><column-value><![CDATA[");
        sb.append(getHandOverFormId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerCode</column-name><column-value><![CDATA[");
        sb.append(getCustomerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contactPoint</column-name><column-value><![CDATA[");
        sb.append(getContactPoint());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phone</column-name><column-value><![CDATA[");
        sb.append(getPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>location</column-name><column-value><![CDATA[");
        sb.append(getLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>personInCharge</column-name><column-value><![CDATA[");
        sb.append(getPersonInCharge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>handOverFormNumber</column-name><column-value><![CDATA[");
        sb.append(getHandOverFormNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>assignDate</column-name><column-value><![CDATA[");
        sb.append(getAssignDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>estimatedReturnDate</column-name><column-value><![CDATA[");
        sb.append(getEstimatedReturnDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
        sb.append(getStatusByUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>statusDate</column-name><column-value><![CDATA[");
        sb.append(getStatusDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>testId</column-name><column-value><![CDATA[");
        sb.append(getTestId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
