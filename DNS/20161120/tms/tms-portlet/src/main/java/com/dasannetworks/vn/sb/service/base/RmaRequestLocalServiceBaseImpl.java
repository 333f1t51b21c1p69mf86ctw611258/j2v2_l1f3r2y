package com.dasannetworks.vn.sb.service.base;

import com.dasannetworks.vn.sb.model.RmaRequest;
import com.dasannetworks.vn.sb.service.RmaRequestLocalService;
import com.dasannetworks.vn.sb.service.persistence.ContactPersistence;
import com.dasannetworks.vn.sb.service.persistence.DevicePersistence;
import com.dasannetworks.vn.sb.service.persistence.PurchaseOrderPersistence;
import com.dasannetworks.vn.sb.service.persistence.RmaRequestDevicePersistence;
import com.dasannetworks.vn.sb.service.persistence.RmaRequestPersistence;
import com.dasannetworks.vn.sb.service.persistence.WarrantyFormPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.service.persistence.WorkflowDefinitionLinkPersistence;
import com.liferay.portal.service.persistence.WorkflowInstanceLinkPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the rma request local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.dasannetworks.vn.sb.service.impl.RmaRequestLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.dasannetworks.vn.sb.service.impl.RmaRequestLocalServiceImpl
 * @see com.dasannetworks.vn.sb.service.RmaRequestLocalServiceUtil
 * @generated
 */
public abstract class RmaRequestLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements RmaRequestLocalService,
        IdentifiableBean {
    @BeanReference(type = com.dasannetworks.vn.sb.service.ContactLocalService.class)
    protected com.dasannetworks.vn.sb.service.ContactLocalService contactLocalService;
    @BeanReference(type = ContactPersistence.class)
    protected ContactPersistence contactPersistence;
    @BeanReference(type = com.dasannetworks.vn.sb.service.DeviceLocalService.class)
    protected com.dasannetworks.vn.sb.service.DeviceLocalService deviceLocalService;
    @BeanReference(type = DevicePersistence.class)
    protected DevicePersistence devicePersistence;
    @BeanReference(type = com.dasannetworks.vn.sb.service.PurchaseOrderLocalService.class)
    protected com.dasannetworks.vn.sb.service.PurchaseOrderLocalService purchaseOrderLocalService;
    @BeanReference(type = PurchaseOrderPersistence.class)
    protected PurchaseOrderPersistence purchaseOrderPersistence;
    @BeanReference(type = com.dasannetworks.vn.sb.service.RmaRequestLocalService.class)
    protected com.dasannetworks.vn.sb.service.RmaRequestLocalService rmaRequestLocalService;
    @BeanReference(type = RmaRequestPersistence.class)
    protected RmaRequestPersistence rmaRequestPersistence;
    @BeanReference(type = com.dasannetworks.vn.sb.service.RmaRequestDeviceLocalService.class)
    protected com.dasannetworks.vn.sb.service.RmaRequestDeviceLocalService rmaRequestDeviceLocalService;
    @BeanReference(type = RmaRequestDevicePersistence.class)
    protected RmaRequestDevicePersistence rmaRequestDevicePersistence;
    @BeanReference(type = com.dasannetworks.vn.sb.service.WarrantyFormLocalService.class)
    protected com.dasannetworks.vn.sb.service.WarrantyFormLocalService warrantyFormLocalService;
    @BeanReference(type = WarrantyFormPersistence.class)
    protected WarrantyFormPersistence warrantyFormPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portal.service.WorkflowDefinitionLinkLocalService.class)
    protected com.liferay.portal.service.WorkflowDefinitionLinkLocalService workflowDefinitionLinkLocalService;
    @BeanReference(type = WorkflowDefinitionLinkPersistence.class)
    protected WorkflowDefinitionLinkPersistence workflowDefinitionLinkPersistence;
    @BeanReference(type = com.liferay.portal.service.WorkflowInstanceLinkLocalService.class)
    protected com.liferay.portal.service.WorkflowInstanceLinkLocalService workflowInstanceLinkLocalService;
    @BeanReference(type = WorkflowInstanceLinkPersistence.class)
    protected WorkflowInstanceLinkPersistence workflowInstanceLinkPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private RmaRequestLocalServiceClpInvoker _clpInvoker = new RmaRequestLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.dasannetworks.vn.sb.service.RmaRequestLocalServiceUtil} to access the rma request local service.
     */

    /**
     * Adds the rma request to the database. Also notifies the appropriate model listeners.
     *
     * @param rmaRequest the rma request
     * @return the rma request that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public RmaRequest addRmaRequest(RmaRequest rmaRequest)
        throws SystemException {
        rmaRequest.setNew(true);

        return rmaRequestPersistence.update(rmaRequest);
    }

    /**
     * Creates a new rma request with the primary key. Does not add the rma request to the database.
     *
     * @param rmaRequestId the primary key for the new rma request
     * @return the new rma request
     */
    @Override
    public RmaRequest createRmaRequest(long rmaRequestId) {
        return rmaRequestPersistence.create(rmaRequestId);
    }

    /**
     * Deletes the rma request with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param rmaRequestId the primary key of the rma request
     * @return the rma request that was removed
     * @throws PortalException if a rma request with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public RmaRequest deleteRmaRequest(long rmaRequestId)
        throws PortalException, SystemException {
        return rmaRequestPersistence.remove(rmaRequestId);
    }

    /**
     * Deletes the rma request from the database. Also notifies the appropriate model listeners.
     *
     * @param rmaRequest the rma request
     * @return the rma request that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public RmaRequest deleteRmaRequest(RmaRequest rmaRequest)
        throws SystemException {
        return rmaRequestPersistence.remove(rmaRequest);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(RmaRequest.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return rmaRequestPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dasannetworks.vn.sb.model.impl.RmaRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return rmaRequestPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dasannetworks.vn.sb.model.impl.RmaRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return rmaRequestPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return rmaRequestPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return rmaRequestPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public RmaRequest fetchRmaRequest(long rmaRequestId)
        throws SystemException {
        return rmaRequestPersistence.fetchByPrimaryKey(rmaRequestId);
    }

    /**
     * Returns the rma request with the matching UUID and company.
     *
     * @param uuid the rma request's UUID
     * @param  companyId the primary key of the company
     * @return the matching rma request, or <code>null</code> if a matching rma request could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public RmaRequest fetchRmaRequestByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return rmaRequestPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the rma request matching the UUID and group.
     *
     * @param uuid the rma request's UUID
     * @param groupId the primary key of the group
     * @return the matching rma request, or <code>null</code> if a matching rma request could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public RmaRequest fetchRmaRequestByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return rmaRequestPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the rma request with the primary key.
     *
     * @param rmaRequestId the primary key of the rma request
     * @return the rma request
     * @throws PortalException if a rma request with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public RmaRequest getRmaRequest(long rmaRequestId)
        throws PortalException, SystemException {
        return rmaRequestPersistence.findByPrimaryKey(rmaRequestId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return rmaRequestPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the rma request with the matching UUID and company.
     *
     * @param uuid the rma request's UUID
     * @param  companyId the primary key of the company
     * @return the matching rma request
     * @throws PortalException if a matching rma request could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public RmaRequest getRmaRequestByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return rmaRequestPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the rma request matching the UUID and group.
     *
     * @param uuid the rma request's UUID
     * @param groupId the primary key of the group
     * @return the matching rma request
     * @throws PortalException if a matching rma request could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public RmaRequest getRmaRequestByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return rmaRequestPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the rma requests.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dasannetworks.vn.sb.model.impl.RmaRequestModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of rma requests
     * @param end the upper bound of the range of rma requests (not inclusive)
     * @return the range of rma requests
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<RmaRequest> getRmaRequests(int start, int end)
        throws SystemException {
        return rmaRequestPersistence.findAll(start, end);
    }

    /**
     * Returns the number of rma requests.
     *
     * @return the number of rma requests
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getRmaRequestsCount() throws SystemException {
        return rmaRequestPersistence.countAll();
    }

    /**
     * Updates the rma request in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param rmaRequest the rma request
     * @return the rma request that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public RmaRequest updateRmaRequest(RmaRequest rmaRequest)
        throws SystemException {
        return rmaRequestPersistence.update(rmaRequest);
    }

    /**
     * Returns the contact local service.
     *
     * @return the contact local service
     */
    public com.dasannetworks.vn.sb.service.ContactLocalService getContactLocalService() {
        return contactLocalService;
    }

    /**
     * Sets the contact local service.
     *
     * @param contactLocalService the contact local service
     */
    public void setContactLocalService(
        com.dasannetworks.vn.sb.service.ContactLocalService contactLocalService) {
        this.contactLocalService = contactLocalService;
    }

    /**
     * Returns the contact persistence.
     *
     * @return the contact persistence
     */
    public ContactPersistence getContactPersistence() {
        return contactPersistence;
    }

    /**
     * Sets the contact persistence.
     *
     * @param contactPersistence the contact persistence
     */
    public void setContactPersistence(ContactPersistence contactPersistence) {
        this.contactPersistence = contactPersistence;
    }

    /**
     * Returns the device local service.
     *
     * @return the device local service
     */
    public com.dasannetworks.vn.sb.service.DeviceLocalService getDeviceLocalService() {
        return deviceLocalService;
    }

    /**
     * Sets the device local service.
     *
     * @param deviceLocalService the device local service
     */
    public void setDeviceLocalService(
        com.dasannetworks.vn.sb.service.DeviceLocalService deviceLocalService) {
        this.deviceLocalService = deviceLocalService;
    }

    /**
     * Returns the device persistence.
     *
     * @return the device persistence
     */
    public DevicePersistence getDevicePersistence() {
        return devicePersistence;
    }

    /**
     * Sets the device persistence.
     *
     * @param devicePersistence the device persistence
     */
    public void setDevicePersistence(DevicePersistence devicePersistence) {
        this.devicePersistence = devicePersistence;
    }

    /**
     * Returns the purchase order local service.
     *
     * @return the purchase order local service
     */
    public com.dasannetworks.vn.sb.service.PurchaseOrderLocalService getPurchaseOrderLocalService() {
        return purchaseOrderLocalService;
    }

    /**
     * Sets the purchase order local service.
     *
     * @param purchaseOrderLocalService the purchase order local service
     */
    public void setPurchaseOrderLocalService(
        com.dasannetworks.vn.sb.service.PurchaseOrderLocalService purchaseOrderLocalService) {
        this.purchaseOrderLocalService = purchaseOrderLocalService;
    }

    /**
     * Returns the purchase order persistence.
     *
     * @return the purchase order persistence
     */
    public PurchaseOrderPersistence getPurchaseOrderPersistence() {
        return purchaseOrderPersistence;
    }

    /**
     * Sets the purchase order persistence.
     *
     * @param purchaseOrderPersistence the purchase order persistence
     */
    public void setPurchaseOrderPersistence(
        PurchaseOrderPersistence purchaseOrderPersistence) {
        this.purchaseOrderPersistence = purchaseOrderPersistence;
    }

    /**
     * Returns the rma request local service.
     *
     * @return the rma request local service
     */
    public com.dasannetworks.vn.sb.service.RmaRequestLocalService getRmaRequestLocalService() {
        return rmaRequestLocalService;
    }

    /**
     * Sets the rma request local service.
     *
     * @param rmaRequestLocalService the rma request local service
     */
    public void setRmaRequestLocalService(
        com.dasannetworks.vn.sb.service.RmaRequestLocalService rmaRequestLocalService) {
        this.rmaRequestLocalService = rmaRequestLocalService;
    }

    /**
     * Returns the rma request persistence.
     *
     * @return the rma request persistence
     */
    public RmaRequestPersistence getRmaRequestPersistence() {
        return rmaRequestPersistence;
    }

    /**
     * Sets the rma request persistence.
     *
     * @param rmaRequestPersistence the rma request persistence
     */
    public void setRmaRequestPersistence(
        RmaRequestPersistence rmaRequestPersistence) {
        this.rmaRequestPersistence = rmaRequestPersistence;
    }

    /**
     * Returns the rma request device local service.
     *
     * @return the rma request device local service
     */
    public com.dasannetworks.vn.sb.service.RmaRequestDeviceLocalService getRmaRequestDeviceLocalService() {
        return rmaRequestDeviceLocalService;
    }

    /**
     * Sets the rma request device local service.
     *
     * @param rmaRequestDeviceLocalService the rma request device local service
     */
    public void setRmaRequestDeviceLocalService(
        com.dasannetworks.vn.sb.service.RmaRequestDeviceLocalService rmaRequestDeviceLocalService) {
        this.rmaRequestDeviceLocalService = rmaRequestDeviceLocalService;
    }

    /**
     * Returns the rma request device persistence.
     *
     * @return the rma request device persistence
     */
    public RmaRequestDevicePersistence getRmaRequestDevicePersistence() {
        return rmaRequestDevicePersistence;
    }

    /**
     * Sets the rma request device persistence.
     *
     * @param rmaRequestDevicePersistence the rma request device persistence
     */
    public void setRmaRequestDevicePersistence(
        RmaRequestDevicePersistence rmaRequestDevicePersistence) {
        this.rmaRequestDevicePersistence = rmaRequestDevicePersistence;
    }

    /**
     * Returns the warranty form local service.
     *
     * @return the warranty form local service
     */
    public com.dasannetworks.vn.sb.service.WarrantyFormLocalService getWarrantyFormLocalService() {
        return warrantyFormLocalService;
    }

    /**
     * Sets the warranty form local service.
     *
     * @param warrantyFormLocalService the warranty form local service
     */
    public void setWarrantyFormLocalService(
        com.dasannetworks.vn.sb.service.WarrantyFormLocalService warrantyFormLocalService) {
        this.warrantyFormLocalService = warrantyFormLocalService;
    }

    /**
     * Returns the warranty form persistence.
     *
     * @return the warranty form persistence
     */
    public WarrantyFormPersistence getWarrantyFormPersistence() {
        return warrantyFormPersistence;
    }

    /**
     * Sets the warranty form persistence.
     *
     * @param warrantyFormPersistence the warranty form persistence
     */
    public void setWarrantyFormPersistence(
        WarrantyFormPersistence warrantyFormPersistence) {
        this.warrantyFormPersistence = warrantyFormPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the workflow definition link local service.
     *
     * @return the workflow definition link local service
     */
    public com.liferay.portal.service.WorkflowDefinitionLinkLocalService getWorkflowDefinitionLinkLocalService() {
        return workflowDefinitionLinkLocalService;
    }

    /**
     * Sets the workflow definition link local service.
     *
     * @param workflowDefinitionLinkLocalService the workflow definition link local service
     */
    public void setWorkflowDefinitionLinkLocalService(
        com.liferay.portal.service.WorkflowDefinitionLinkLocalService workflowDefinitionLinkLocalService) {
        this.workflowDefinitionLinkLocalService = workflowDefinitionLinkLocalService;
    }

    /**
     * Returns the workflow definition link persistence.
     *
     * @return the workflow definition link persistence
     */
    public WorkflowDefinitionLinkPersistence getWorkflowDefinitionLinkPersistence() {
        return workflowDefinitionLinkPersistence;
    }

    /**
     * Sets the workflow definition link persistence.
     *
     * @param workflowDefinitionLinkPersistence the workflow definition link persistence
     */
    public void setWorkflowDefinitionLinkPersistence(
        WorkflowDefinitionLinkPersistence workflowDefinitionLinkPersistence) {
        this.workflowDefinitionLinkPersistence = workflowDefinitionLinkPersistence;
    }

    /**
     * Returns the workflow instance link local service.
     *
     * @return the workflow instance link local service
     */
    public com.liferay.portal.service.WorkflowInstanceLinkLocalService getWorkflowInstanceLinkLocalService() {
        return workflowInstanceLinkLocalService;
    }

    /**
     * Sets the workflow instance link local service.
     *
     * @param workflowInstanceLinkLocalService the workflow instance link local service
     */
    public void setWorkflowInstanceLinkLocalService(
        com.liferay.portal.service.WorkflowInstanceLinkLocalService workflowInstanceLinkLocalService) {
        this.workflowInstanceLinkLocalService = workflowInstanceLinkLocalService;
    }

    /**
     * Returns the workflow instance link persistence.
     *
     * @return the workflow instance link persistence
     */
    public WorkflowInstanceLinkPersistence getWorkflowInstanceLinkPersistence() {
        return workflowInstanceLinkPersistence;
    }

    /**
     * Sets the workflow instance link persistence.
     *
     * @param workflowInstanceLinkPersistence the workflow instance link persistence
     */
    public void setWorkflowInstanceLinkPersistence(
        WorkflowInstanceLinkPersistence workflowInstanceLinkPersistence) {
        this.workflowInstanceLinkPersistence = workflowInstanceLinkPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.dasannetworks.vn.sb.model.RmaRequest",
            rmaRequestLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.dasannetworks.vn.sb.model.RmaRequest");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return RmaRequest.class;
    }

    protected String getModelClassName() {
        return RmaRequest.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = rmaRequestPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
