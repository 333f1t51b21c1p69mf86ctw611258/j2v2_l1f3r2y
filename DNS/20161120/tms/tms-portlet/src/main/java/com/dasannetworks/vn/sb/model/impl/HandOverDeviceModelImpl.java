package com.dasannetworks.vn.sb.model.impl;

import com.dasannetworks.vn.sb.model.HandOverDevice;
import com.dasannetworks.vn.sb.model.HandOverDeviceModel;
import com.dasannetworks.vn.sb.service.persistence.HandOverDevicePK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the HandOverDevice service. Represents a row in the &quot;tms_HandOverDevice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dasannetworks.vn.sb.model.HandOverDeviceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HandOverDeviceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HandOverDeviceImpl
 * @see com.dasannetworks.vn.sb.model.HandOverDevice
 * @see com.dasannetworks.vn.sb.model.HandOverDeviceModel
 * @generated
 */
public class HandOverDeviceModelImpl extends BaseModelImpl<HandOverDevice>
    implements HandOverDeviceModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a hand over device model instance should use the {@link com.dasannetworks.vn.sb.model.HandOverDevice} interface instead.
     */
    public static final String TABLE_NAME = "tms_HandOverDevice";
    public static final Object[][] TABLE_COLUMNS = {
            { "handOverFormId", Types.BIGINT },
            { "deviceId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "faultNote", Types.VARCHAR },
            { "status", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table tms_HandOverDevice (handOverFormId LONG not null,deviceId LONG not null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,faultNote VARCHAR(75) null,status VARCHAR(75) null,primary key (handOverFormId, deviceId))";
    public static final String TABLE_SQL_DROP = "drop table tms_HandOverDevice";
    public static final String ORDER_BY_JPQL = " ORDER BY handOverDevice.id.handOverFormId ASC, handOverDevice.id.deviceId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY tms_HandOverDevice.handOverFormId ASC, tms_HandOverDevice.deviceId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.dasannetworks.vn.sb.model.HandOverDevice"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.dasannetworks.vn.sb.model.HandOverDevice"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.dasannetworks.vn.sb.model.HandOverDevice"),
            true);
    public static long DEVICEID_COLUMN_BITMASK = 1L;
    public static long HANDOVERFORMID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.dasannetworks.vn.sb.model.HandOverDevice"));
    private static ClassLoader _classLoader = HandOverDevice.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            HandOverDevice.class
        };
    private long _handOverFormId;
    private long _originalHandOverFormId;
    private boolean _setOriginalHandOverFormId;
    private long _deviceId;
    private long _originalDeviceId;
    private boolean _setOriginalDeviceId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _faultNote;
    private String _status;
    private long _columnBitmask;
    private HandOverDevice _escapedModel;

    public HandOverDeviceModelImpl() {
    }

    @Override
    public HandOverDevicePK getPrimaryKey() {
        return new HandOverDevicePK(_handOverFormId, _deviceId);
    }

    @Override
    public void setPrimaryKey(HandOverDevicePK primaryKey) {
        setHandOverFormId(primaryKey.handOverFormId);
        setDeviceId(primaryKey.deviceId);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return new HandOverDevicePK(_handOverFormId, _deviceId);
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((HandOverDevicePK) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return HandOverDevice.class;
    }

    @Override
    public String getModelClassName() {
        return HandOverDevice.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("handOverFormId", getHandOverFormId());
        attributes.put("deviceId", getDeviceId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("faultNote", getFaultNote());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long handOverFormId = (Long) attributes.get("handOverFormId");

        if (handOverFormId != null) {
            setHandOverFormId(handOverFormId);
        }

        Long deviceId = (Long) attributes.get("deviceId");

        if (deviceId != null) {
            setDeviceId(deviceId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String faultNote = (String) attributes.get("faultNote");

        if (faultNote != null) {
            setFaultNote(faultNote);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @Override
    public long getHandOverFormId() {
        return _handOverFormId;
    }

    @Override
    public void setHandOverFormId(long handOverFormId) {
        _columnBitmask |= HANDOVERFORMID_COLUMN_BITMASK;

        if (!_setOriginalHandOverFormId) {
            _setOriginalHandOverFormId = true;

            _originalHandOverFormId = _handOverFormId;
        }

        _handOverFormId = handOverFormId;
    }

    public long getOriginalHandOverFormId() {
        return _originalHandOverFormId;
    }

    @Override
    public long getDeviceId() {
        return _deviceId;
    }

    @Override
    public void setDeviceId(long deviceId) {
        _columnBitmask |= DEVICEID_COLUMN_BITMASK;

        if (!_setOriginalDeviceId) {
            _setOriginalDeviceId = true;

            _originalDeviceId = _deviceId;
        }

        _deviceId = deviceId;
    }

    public long getOriginalDeviceId() {
        return _originalDeviceId;
    }

    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public String getFaultNote() {
        if (_faultNote == null) {
            return StringPool.BLANK;
        } else {
            return _faultNote;
        }
    }

    @Override
    public void setFaultNote(String faultNote) {
        _faultNote = faultNote;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public HandOverDevice toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (HandOverDevice) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        HandOverDeviceImpl handOverDeviceImpl = new HandOverDeviceImpl();

        handOverDeviceImpl.setHandOverFormId(getHandOverFormId());
        handOverDeviceImpl.setDeviceId(getDeviceId());
        handOverDeviceImpl.setCompanyId(getCompanyId());
        handOverDeviceImpl.setUserId(getUserId());
        handOverDeviceImpl.setUserName(getUserName());
        handOverDeviceImpl.setCreateDate(getCreateDate());
        handOverDeviceImpl.setModifiedDate(getModifiedDate());
        handOverDeviceImpl.setFaultNote(getFaultNote());
        handOverDeviceImpl.setStatus(getStatus());

        handOverDeviceImpl.resetOriginalValues();

        return handOverDeviceImpl;
    }

    @Override
    public int compareTo(HandOverDevice handOverDevice) {
        HandOverDevicePK primaryKey = handOverDevice.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof HandOverDevice)) {
            return false;
        }

        HandOverDevice handOverDevice = (HandOverDevice) obj;

        HandOverDevicePK primaryKey = handOverDevice.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
        HandOverDeviceModelImpl handOverDeviceModelImpl = this;

        handOverDeviceModelImpl._originalHandOverFormId = handOverDeviceModelImpl._handOverFormId;

        handOverDeviceModelImpl._setOriginalHandOverFormId = false;

        handOverDeviceModelImpl._originalDeviceId = handOverDeviceModelImpl._deviceId;

        handOverDeviceModelImpl._setOriginalDeviceId = false;

        handOverDeviceModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<HandOverDevice> toCacheModel() {
        HandOverDeviceCacheModel handOverDeviceCacheModel = new HandOverDeviceCacheModel();

        handOverDeviceCacheModel.handOverFormId = getHandOverFormId();

        handOverDeviceCacheModel.deviceId = getDeviceId();

        handOverDeviceCacheModel.companyId = getCompanyId();

        handOverDeviceCacheModel.userId = getUserId();

        handOverDeviceCacheModel.userName = getUserName();

        String userName = handOverDeviceCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            handOverDeviceCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            handOverDeviceCacheModel.createDate = createDate.getTime();
        } else {
            handOverDeviceCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            handOverDeviceCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            handOverDeviceCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        handOverDeviceCacheModel.faultNote = getFaultNote();

        String faultNote = handOverDeviceCacheModel.faultNote;

        if ((faultNote != null) && (faultNote.length() == 0)) {
            handOverDeviceCacheModel.faultNote = null;
        }

        handOverDeviceCacheModel.status = getStatus();

        String status = handOverDeviceCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            handOverDeviceCacheModel.status = null;
        }

        return handOverDeviceCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{handOverFormId=");
        sb.append(getHandOverFormId());
        sb.append(", deviceId=");
        sb.append(getDeviceId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", faultNote=");
        sb.append(getFaultNote());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.dasannetworks.vn.sb.model.HandOverDevice");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>handOverFormId</column-name><column-value><![CDATA[");
        sb.append(getHandOverFormId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deviceId</column-name><column-value><![CDATA[");
        sb.append(getDeviceId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>faultNote</column-name><column-value><![CDATA[");
        sb.append(getFaultNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
