package com.dasannetworks.vn.sb.model.impl;

import com.dasannetworks.vn.sb.model.HandOverForm;
import com.dasannetworks.vn.sb.model.HandOverFormModel;
import com.dasannetworks.vn.sb.model.HandOverFormSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the HandOverForm service. Represents a row in the &quot;tms_HandOverForm&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dasannetworks.vn.sb.model.HandOverFormModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link HandOverFormImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see HandOverFormImpl
 * @see com.dasannetworks.vn.sb.model.HandOverForm
 * @see com.dasannetworks.vn.sb.model.HandOverFormModel
 * @generated
 */
@JSON(strict = true)
public class HandOverFormModelImpl extends BaseModelImpl<HandOverForm>
    implements HandOverFormModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a hand over form model instance should use the {@link com.dasannetworks.vn.sb.model.HandOverForm} interface instead.
     */
    public static final String TABLE_NAME = "tms_HandOverForm";
    public static final Object[][] TABLE_COLUMNS = {
            { "handOverFormId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "customerCode", Types.VARCHAR },
            { "contactPoint", Types.VARCHAR },
            { "email", Types.VARCHAR },
            { "phone", Types.VARCHAR },
            { "location", Types.VARCHAR },
            { "personInCharge", Types.VARCHAR },
            { "handOverFormNumber", Types.VARCHAR },
            { "note", Types.VARCHAR },
            { "assignDate", Types.TIMESTAMP },
            { "estimatedReturnDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table tms_HandOverForm (handOverFormId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customerCode VARCHAR(75) null,contactPoint VARCHAR(75) null,email VARCHAR(75) null,phone VARCHAR(75) null,location VARCHAR(75) null,personInCharge VARCHAR(75) null,handOverFormNumber VARCHAR(75) null,note VARCHAR(75) null,assignDate DATE null,estimatedReturnDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table tms_HandOverForm";
    public static final String ORDER_BY_JPQL = " ORDER BY handOverForm.handOverFormId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY tms_HandOverForm.handOverFormId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.dasannetworks.vn.sb.model.HandOverForm"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.dasannetworks.vn.sb.model.HandOverForm"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.dasannetworks.vn.sb.model.HandOverForm"),
            true);
    public static long HANDOVERFORMNUMBER_COLUMN_BITMASK = 1L;
    public static long HANDOVERFORMID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.dasannetworks.vn.sb.model.HandOverForm"));
    private static ClassLoader _classLoader = HandOverForm.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            HandOverForm.class
        };
    private long _handOverFormId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _customerCode;
    private String _contactPoint;
    private String _email;
    private String _phone;
    private String _location;
    private String _personInCharge;
    private String _handOverFormNumber;
    private String _originalHandOverFormNumber;
    private String _note;
    private Date _assignDate;
    private Date _estimatedReturnDate;
    private long _columnBitmask;
    private HandOverForm _escapedModel;

    public HandOverFormModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static HandOverForm toModel(HandOverFormSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        HandOverForm model = new HandOverFormImpl();

        model.setHandOverFormId(soapModel.getHandOverFormId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setCustomerCode(soapModel.getCustomerCode());
        model.setContactPoint(soapModel.getContactPoint());
        model.setEmail(soapModel.getEmail());
        model.setPhone(soapModel.getPhone());
        model.setLocation(soapModel.getLocation());
        model.setPersonInCharge(soapModel.getPersonInCharge());
        model.setHandOverFormNumber(soapModel.getHandOverFormNumber());
        model.setNote(soapModel.getNote());
        model.setAssignDate(soapModel.getAssignDate());
        model.setEstimatedReturnDate(soapModel.getEstimatedReturnDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<HandOverForm> toModels(HandOverFormSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<HandOverForm> models = new ArrayList<HandOverForm>(soapModels.length);

        for (HandOverFormSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _handOverFormId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setHandOverFormId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _handOverFormId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return HandOverForm.class;
    }

    @Override
    public String getModelClassName() {
        return HandOverForm.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("handOverFormId", getHandOverFormId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("customerCode", getCustomerCode());
        attributes.put("contactPoint", getContactPoint());
        attributes.put("email", getEmail());
        attributes.put("phone", getPhone());
        attributes.put("location", getLocation());
        attributes.put("personInCharge", getPersonInCharge());
        attributes.put("handOverFormNumber", getHandOverFormNumber());
        attributes.put("note", getNote());
        attributes.put("assignDate", getAssignDate());
        attributes.put("estimatedReturnDate", getEstimatedReturnDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long handOverFormId = (Long) attributes.get("handOverFormId");

        if (handOverFormId != null) {
            setHandOverFormId(handOverFormId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String customerCode = (String) attributes.get("customerCode");

        if (customerCode != null) {
            setCustomerCode(customerCode);
        }

        String contactPoint = (String) attributes.get("contactPoint");

        if (contactPoint != null) {
            setContactPoint(contactPoint);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }

        String phone = (String) attributes.get("phone");

        if (phone != null) {
            setPhone(phone);
        }

        String location = (String) attributes.get("location");

        if (location != null) {
            setLocation(location);
        }

        String personInCharge = (String) attributes.get("personInCharge");

        if (personInCharge != null) {
            setPersonInCharge(personInCharge);
        }

        String handOverFormNumber = (String) attributes.get(
                "handOverFormNumber");

        if (handOverFormNumber != null) {
            setHandOverFormNumber(handOverFormNumber);
        }

        String note = (String) attributes.get("note");

        if (note != null) {
            setNote(note);
        }

        Date assignDate = (Date) attributes.get("assignDate");

        if (assignDate != null) {
            setAssignDate(assignDate);
        }

        Date estimatedReturnDate = (Date) attributes.get("estimatedReturnDate");

        if (estimatedReturnDate != null) {
            setEstimatedReturnDate(estimatedReturnDate);
        }
    }

    @JSON
    @Override
    public long getHandOverFormId() {
        return _handOverFormId;
    }

    @Override
    public void setHandOverFormId(long handOverFormId) {
        _handOverFormId = handOverFormId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getCustomerCode() {
        if (_customerCode == null) {
            return StringPool.BLANK;
        } else {
            return _customerCode;
        }
    }

    @Override
    public void setCustomerCode(String customerCode) {
        _customerCode = customerCode;
    }

    @JSON
    @Override
    public String getContactPoint() {
        if (_contactPoint == null) {
            return StringPool.BLANK;
        } else {
            return _contactPoint;
        }
    }

    @Override
    public void setContactPoint(String contactPoint) {
        _contactPoint = contactPoint;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @JSON
    @Override
    public String getPhone() {
        if (_phone == null) {
            return StringPool.BLANK;
        } else {
            return _phone;
        }
    }

    @Override
    public void setPhone(String phone) {
        _phone = phone;
    }

    @JSON
    @Override
    public String getLocation() {
        if (_location == null) {
            return StringPool.BLANK;
        } else {
            return _location;
        }
    }

    @Override
    public void setLocation(String location) {
        _location = location;
    }

    @JSON
    @Override
    public String getPersonInCharge() {
        if (_personInCharge == null) {
            return StringPool.BLANK;
        } else {
            return _personInCharge;
        }
    }

    @Override
    public void setPersonInCharge(String personInCharge) {
        _personInCharge = personInCharge;
    }

    @JSON
    @Override
    public String getHandOverFormNumber() {
        if (_handOverFormNumber == null) {
            return StringPool.BLANK;
        } else {
            return _handOverFormNumber;
        }
    }

    @Override
    public void setHandOverFormNumber(String handOverFormNumber) {
        _columnBitmask |= HANDOVERFORMNUMBER_COLUMN_BITMASK;

        if (_originalHandOverFormNumber == null) {
            _originalHandOverFormNumber = _handOverFormNumber;
        }

        _handOverFormNumber = handOverFormNumber;
    }

    public String getOriginalHandOverFormNumber() {
        return GetterUtil.getString(_originalHandOverFormNumber);
    }

    @JSON
    @Override
    public String getNote() {
        if (_note == null) {
            return StringPool.BLANK;
        } else {
            return _note;
        }
    }

    @Override
    public void setNote(String note) {
        _note = note;
    }

    @JSON
    @Override
    public Date getAssignDate() {
        return _assignDate;
    }

    @Override
    public void setAssignDate(Date assignDate) {
        _assignDate = assignDate;
    }

    @JSON
    @Override
    public Date getEstimatedReturnDate() {
        return _estimatedReturnDate;
    }

    @Override
    public void setEstimatedReturnDate(Date estimatedReturnDate) {
        _estimatedReturnDate = estimatedReturnDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            HandOverForm.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public HandOverForm toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (HandOverForm) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        HandOverFormImpl handOverFormImpl = new HandOverFormImpl();

        handOverFormImpl.setHandOverFormId(getHandOverFormId());
        handOverFormImpl.setCompanyId(getCompanyId());
        handOverFormImpl.setUserId(getUserId());
        handOverFormImpl.setUserName(getUserName());
        handOverFormImpl.setCreateDate(getCreateDate());
        handOverFormImpl.setModifiedDate(getModifiedDate());
        handOverFormImpl.setCustomerCode(getCustomerCode());
        handOverFormImpl.setContactPoint(getContactPoint());
        handOverFormImpl.setEmail(getEmail());
        handOverFormImpl.setPhone(getPhone());
        handOverFormImpl.setLocation(getLocation());
        handOverFormImpl.setPersonInCharge(getPersonInCharge());
        handOverFormImpl.setHandOverFormNumber(getHandOverFormNumber());
        handOverFormImpl.setNote(getNote());
        handOverFormImpl.setAssignDate(getAssignDate());
        handOverFormImpl.setEstimatedReturnDate(getEstimatedReturnDate());

        handOverFormImpl.resetOriginalValues();

        return handOverFormImpl;
    }

    @Override
    public int compareTo(HandOverForm handOverForm) {
        long primaryKey = handOverForm.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof HandOverForm)) {
            return false;
        }

        HandOverForm handOverForm = (HandOverForm) obj;

        long primaryKey = handOverForm.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        HandOverFormModelImpl handOverFormModelImpl = this;

        handOverFormModelImpl._originalHandOverFormNumber = handOverFormModelImpl._handOverFormNumber;

        handOverFormModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<HandOverForm> toCacheModel() {
        HandOverFormCacheModel handOverFormCacheModel = new HandOverFormCacheModel();

        handOverFormCacheModel.handOverFormId = getHandOverFormId();

        handOverFormCacheModel.companyId = getCompanyId();

        handOverFormCacheModel.userId = getUserId();

        handOverFormCacheModel.userName = getUserName();

        String userName = handOverFormCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            handOverFormCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            handOverFormCacheModel.createDate = createDate.getTime();
        } else {
            handOverFormCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            handOverFormCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            handOverFormCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        handOverFormCacheModel.customerCode = getCustomerCode();

        String customerCode = handOverFormCacheModel.customerCode;

        if ((customerCode != null) && (customerCode.length() == 0)) {
            handOverFormCacheModel.customerCode = null;
        }

        handOverFormCacheModel.contactPoint = getContactPoint();

        String contactPoint = handOverFormCacheModel.contactPoint;

        if ((contactPoint != null) && (contactPoint.length() == 0)) {
            handOverFormCacheModel.contactPoint = null;
        }

        handOverFormCacheModel.email = getEmail();

        String email = handOverFormCacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            handOverFormCacheModel.email = null;
        }

        handOverFormCacheModel.phone = getPhone();

        String phone = handOverFormCacheModel.phone;

        if ((phone != null) && (phone.length() == 0)) {
            handOverFormCacheModel.phone = null;
        }

        handOverFormCacheModel.location = getLocation();

        String location = handOverFormCacheModel.location;

        if ((location != null) && (location.length() == 0)) {
            handOverFormCacheModel.location = null;
        }

        handOverFormCacheModel.personInCharge = getPersonInCharge();

        String personInCharge = handOverFormCacheModel.personInCharge;

        if ((personInCharge != null) && (personInCharge.length() == 0)) {
            handOverFormCacheModel.personInCharge = null;
        }

        handOverFormCacheModel.handOverFormNumber = getHandOverFormNumber();

        String handOverFormNumber = handOverFormCacheModel.handOverFormNumber;

        if ((handOverFormNumber != null) && (handOverFormNumber.length() == 0)) {
            handOverFormCacheModel.handOverFormNumber = null;
        }

        handOverFormCacheModel.note = getNote();

        String note = handOverFormCacheModel.note;

        if ((note != null) && (note.length() == 0)) {
            handOverFormCacheModel.note = null;
        }

        Date assignDate = getAssignDate();

        if (assignDate != null) {
            handOverFormCacheModel.assignDate = assignDate.getTime();
        } else {
            handOverFormCacheModel.assignDate = Long.MIN_VALUE;
        }

        Date estimatedReturnDate = getEstimatedReturnDate();

        if (estimatedReturnDate != null) {
            handOverFormCacheModel.estimatedReturnDate = estimatedReturnDate.getTime();
        } else {
            handOverFormCacheModel.estimatedReturnDate = Long.MIN_VALUE;
        }

        return handOverFormCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(33);

        sb.append("{handOverFormId=");
        sb.append(getHandOverFormId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", customerCode=");
        sb.append(getCustomerCode());
        sb.append(", contactPoint=");
        sb.append(getContactPoint());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append(", phone=");
        sb.append(getPhone());
        sb.append(", location=");
        sb.append(getLocation());
        sb.append(", personInCharge=");
        sb.append(getPersonInCharge());
        sb.append(", handOverFormNumber=");
        sb.append(getHandOverFormNumber());
        sb.append(", note=");
        sb.append(getNote());
        sb.append(", assignDate=");
        sb.append(getAssignDate());
        sb.append(", estimatedReturnDate=");
        sb.append(getEstimatedReturnDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(52);

        sb.append("<model><model-name>");
        sb.append("com.dasannetworks.vn.sb.model.HandOverForm");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>handOverFormId</column-name><column-value><![CDATA[");
        sb.append(getHandOverFormId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customerCode</column-name><column-value><![CDATA[");
        sb.append(getCustomerCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>contactPoint</column-name><column-value><![CDATA[");
        sb.append(getContactPoint());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>phone</column-name><column-value><![CDATA[");
        sb.append(getPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>location</column-name><column-value><![CDATA[");
        sb.append(getLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>personInCharge</column-name><column-value><![CDATA[");
        sb.append(getPersonInCharge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>handOverFormNumber</column-name><column-value><![CDATA[");
        sb.append(getHandOverFormNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>note</column-name><column-value><![CDATA[");
        sb.append(getNote());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>assignDate</column-name><column-value><![CDATA[");
        sb.append(getAssignDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>estimatedReturnDate</column-name><column-value><![CDATA[");
        sb.append(getEstimatedReturnDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
