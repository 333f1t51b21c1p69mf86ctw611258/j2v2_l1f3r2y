package com.dasannetworks.vn.sb.model.impl;

import com.dasannetworks.vn.sb.model.PurchaseOrder;
import com.dasannetworks.vn.sb.model.PurchaseOrderModel;
import com.dasannetworks.vn.sb.model.PurchaseOrderSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the PurchaseOrder service. Represents a row in the &quot;tms_PurchaseOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.dasannetworks.vn.sb.model.PurchaseOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PurchaseOrderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see PurchaseOrderImpl
 * @see com.dasannetworks.vn.sb.model.PurchaseOrder
 * @see com.dasannetworks.vn.sb.model.PurchaseOrderModel
 * @generated
 */
@JSON(strict = true)
public class PurchaseOrderModelImpl extends BaseModelImpl<PurchaseOrder>
    implements PurchaseOrderModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a purchase order model instance should use the {@link com.dasannetworks.vn.sb.model.PurchaseOrder} interface instead.
     */
    public static final String TABLE_NAME = "tms_PurchaseOrder";
    public static final Object[][] TABLE_COLUMNS = {
            { "purchaseOrderId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "customer", Types.VARCHAR },
            { "signDate", Types.TIMESTAMP },
            { "purchaseOrderNumber", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table tms_PurchaseOrder (purchaseOrderId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,customer VARCHAR(75) null,signDate DATE null,purchaseOrderNumber VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table tms_PurchaseOrder";
    public static final String ORDER_BY_JPQL = " ORDER BY purchaseOrder.purchaseOrderId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY tms_PurchaseOrder.purchaseOrderId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.dasannetworks.vn.sb.model.PurchaseOrder"),
            false);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.dasannetworks.vn.sb.model.PurchaseOrder"),
            false);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.dasannetworks.vn.sb.model.PurchaseOrder"),
            true);
    public static long PURCHASEORDERNUMBER_COLUMN_BITMASK = 1L;
    public static long PURCHASEORDERID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.dasannetworks.vn.sb.model.PurchaseOrder"));
    private static ClassLoader _classLoader = PurchaseOrder.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            PurchaseOrder.class
        };
    private long _purchaseOrderId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private String _customer;
    private Date _signDate;
    private String _purchaseOrderNumber;
    private String _originalPurchaseOrderNumber;
    private long _columnBitmask;
    private PurchaseOrder _escapedModel;

    public PurchaseOrderModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static PurchaseOrder toModel(PurchaseOrderSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        PurchaseOrder model = new PurchaseOrderImpl();

        model.setPurchaseOrderId(soapModel.getPurchaseOrderId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setCustomer(soapModel.getCustomer());
        model.setSignDate(soapModel.getSignDate());
        model.setPurchaseOrderNumber(soapModel.getPurchaseOrderNumber());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<PurchaseOrder> toModels(PurchaseOrderSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<PurchaseOrder> models = new ArrayList<PurchaseOrder>(soapModels.length);

        for (PurchaseOrderSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _purchaseOrderId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setPurchaseOrderId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _purchaseOrderId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return PurchaseOrder.class;
    }

    @Override
    public String getModelClassName() {
        return PurchaseOrder.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("purchaseOrderId", getPurchaseOrderId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("customer", getCustomer());
        attributes.put("signDate", getSignDate());
        attributes.put("purchaseOrderNumber", getPurchaseOrderNumber());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long purchaseOrderId = (Long) attributes.get("purchaseOrderId");

        if (purchaseOrderId != null) {
            setPurchaseOrderId(purchaseOrderId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        String customer = (String) attributes.get("customer");

        if (customer != null) {
            setCustomer(customer);
        }

        Date signDate = (Date) attributes.get("signDate");

        if (signDate != null) {
            setSignDate(signDate);
        }

        String purchaseOrderNumber = (String) attributes.get(
                "purchaseOrderNumber");

        if (purchaseOrderNumber != null) {
            setPurchaseOrderNumber(purchaseOrderNumber);
        }
    }

    @JSON
    @Override
    public long getPurchaseOrderId() {
        return _purchaseOrderId;
    }

    @Override
    public void setPurchaseOrderId(long purchaseOrderId) {
        _purchaseOrderId = purchaseOrderId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public String getCustomer() {
        if (_customer == null) {
            return StringPool.BLANK;
        } else {
            return _customer;
        }
    }

    @Override
    public void setCustomer(String customer) {
        _customer = customer;
    }

    @JSON
    @Override
    public Date getSignDate() {
        return _signDate;
    }

    @Override
    public void setSignDate(Date signDate) {
        _signDate = signDate;
    }

    @JSON
    @Override
    public String getPurchaseOrderNumber() {
        if (_purchaseOrderNumber == null) {
            return StringPool.BLANK;
        } else {
            return _purchaseOrderNumber;
        }
    }

    @Override
    public void setPurchaseOrderNumber(String purchaseOrderNumber) {
        _columnBitmask |= PURCHASEORDERNUMBER_COLUMN_BITMASK;

        if (_originalPurchaseOrderNumber == null) {
            _originalPurchaseOrderNumber = _purchaseOrderNumber;
        }

        _purchaseOrderNumber = purchaseOrderNumber;
    }

    public String getOriginalPurchaseOrderNumber() {
        return GetterUtil.getString(_originalPurchaseOrderNumber);
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            PurchaseOrder.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public PurchaseOrder toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (PurchaseOrder) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PurchaseOrderImpl purchaseOrderImpl = new PurchaseOrderImpl();

        purchaseOrderImpl.setPurchaseOrderId(getPurchaseOrderId());
        purchaseOrderImpl.setCompanyId(getCompanyId());
        purchaseOrderImpl.setUserId(getUserId());
        purchaseOrderImpl.setUserName(getUserName());
        purchaseOrderImpl.setCreateDate(getCreateDate());
        purchaseOrderImpl.setModifiedDate(getModifiedDate());
        purchaseOrderImpl.setCustomer(getCustomer());
        purchaseOrderImpl.setSignDate(getSignDate());
        purchaseOrderImpl.setPurchaseOrderNumber(getPurchaseOrderNumber());

        purchaseOrderImpl.resetOriginalValues();

        return purchaseOrderImpl;
    }

    @Override
    public int compareTo(PurchaseOrder purchaseOrder) {
        long primaryKey = purchaseOrder.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof PurchaseOrder)) {
            return false;
        }

        PurchaseOrder purchaseOrder = (PurchaseOrder) obj;

        long primaryKey = purchaseOrder.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        PurchaseOrderModelImpl purchaseOrderModelImpl = this;

        purchaseOrderModelImpl._originalPurchaseOrderNumber = purchaseOrderModelImpl._purchaseOrderNumber;

        purchaseOrderModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<PurchaseOrder> toCacheModel() {
        PurchaseOrderCacheModel purchaseOrderCacheModel = new PurchaseOrderCacheModel();

        purchaseOrderCacheModel.purchaseOrderId = getPurchaseOrderId();

        purchaseOrderCacheModel.companyId = getCompanyId();

        purchaseOrderCacheModel.userId = getUserId();

        purchaseOrderCacheModel.userName = getUserName();

        String userName = purchaseOrderCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            purchaseOrderCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            purchaseOrderCacheModel.createDate = createDate.getTime();
        } else {
            purchaseOrderCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            purchaseOrderCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            purchaseOrderCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        purchaseOrderCacheModel.customer = getCustomer();

        String customer = purchaseOrderCacheModel.customer;

        if ((customer != null) && (customer.length() == 0)) {
            purchaseOrderCacheModel.customer = null;
        }

        Date signDate = getSignDate();

        if (signDate != null) {
            purchaseOrderCacheModel.signDate = signDate.getTime();
        } else {
            purchaseOrderCacheModel.signDate = Long.MIN_VALUE;
        }

        purchaseOrderCacheModel.purchaseOrderNumber = getPurchaseOrderNumber();

        String purchaseOrderNumber = purchaseOrderCacheModel.purchaseOrderNumber;

        if ((purchaseOrderNumber != null) &&
                (purchaseOrderNumber.length() == 0)) {
            purchaseOrderCacheModel.purchaseOrderNumber = null;
        }

        return purchaseOrderCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(19);

        sb.append("{purchaseOrderId=");
        sb.append(getPurchaseOrderId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", customer=");
        sb.append(getCustomer());
        sb.append(", signDate=");
        sb.append(getSignDate());
        sb.append(", purchaseOrderNumber=");
        sb.append(getPurchaseOrderNumber());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(31);

        sb.append("<model><model-name>");
        sb.append("com.dasannetworks.vn.sb.model.PurchaseOrder");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>purchaseOrderId</column-name><column-value><![CDATA[");
        sb.append(getPurchaseOrderId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>customer</column-name><column-value><![CDATA[");
        sb.append(getCustomer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>signDate</column-name><column-value><![CDATA[");
        sb.append(getSignDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>purchaseOrderNumber</column-name><column-value><![CDATA[");
        sb.append(getPurchaseOrderNumber());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
