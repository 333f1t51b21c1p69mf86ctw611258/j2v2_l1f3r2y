package com.dasannetworks.tms.sb.service.base;

import com.dasannetworks.tms.sb.model.Feedback;
import com.dasannetworks.tms.sb.service.FeedbackLocalService;
import com.dasannetworks.tms.sb.service.persistence.BookPersistence;
import com.dasannetworks.tms.sb.service.persistence.ContactPersistence;
import com.dasannetworks.tms.sb.service.persistence.DevicePersistence;
import com.dasannetworks.tms.sb.service.persistence.FeedbackPersistence;
import com.dasannetworks.tms.sb.service.persistence.FooPersistence;
import com.dasannetworks.tms.sb.service.persistence.StudentPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.ClassNamePersistence;
import com.liferay.portal.service.persistence.UserPersistence;
import com.liferay.portal.service.persistence.WorkflowDefinitionLinkPersistence;
import com.liferay.portal.service.persistence.WorkflowInstanceLinkPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.expando.service.persistence.ExpandoRowPersistence;
import com.liferay.portlet.expando.service.persistence.ExpandoTablePersistence;
import com.liferay.portlet.expando.service.persistence.ExpandoValuePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the feedback local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.dasannetworks.tms.sb.service.impl.FeedbackLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.dasannetworks.tms.sb.service.impl.FeedbackLocalServiceImpl
 * @see com.dasannetworks.tms.sb.service.FeedbackLocalServiceUtil
 * @generated
 */
public abstract class FeedbackLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements FeedbackLocalService, IdentifiableBean {
    @BeanReference(type = com.dasannetworks.tms.sb.service.BookLocalService.class)
    protected com.dasannetworks.tms.sb.service.BookLocalService bookLocalService;
    @BeanReference(type = com.dasannetworks.tms.sb.service.BookService.class)
    protected com.dasannetworks.tms.sb.service.BookService bookService;
    @BeanReference(type = BookPersistence.class)
    protected BookPersistence bookPersistence;
    @BeanReference(type = com.dasannetworks.tms.sb.service.ContactLocalService.class)
    protected com.dasannetworks.tms.sb.service.ContactLocalService contactLocalService;
    @BeanReference(type = com.dasannetworks.tms.sb.service.ContactService.class)
    protected com.dasannetworks.tms.sb.service.ContactService contactService;
    @BeanReference(type = ContactPersistence.class)
    protected ContactPersistence contactPersistence;
    @BeanReference(type = com.dasannetworks.tms.sb.service.DeviceLocalService.class)
    protected com.dasannetworks.tms.sb.service.DeviceLocalService deviceLocalService;
    @BeanReference(type = com.dasannetworks.tms.sb.service.DeviceService.class)
    protected com.dasannetworks.tms.sb.service.DeviceService deviceService;
    @BeanReference(type = DevicePersistence.class)
    protected DevicePersistence devicePersistence;
    @BeanReference(type = com.dasannetworks.tms.sb.service.FeedbackLocalService.class)
    protected com.dasannetworks.tms.sb.service.FeedbackLocalService feedbackLocalService;
    @BeanReference(type = com.dasannetworks.tms.sb.service.FeedbackService.class)
    protected com.dasannetworks.tms.sb.service.FeedbackService feedbackService;
    @BeanReference(type = FeedbackPersistence.class)
    protected FeedbackPersistence feedbackPersistence;
    @BeanReference(type = com.dasannetworks.tms.sb.service.FooLocalService.class)
    protected com.dasannetworks.tms.sb.service.FooLocalService fooLocalService;
    @BeanReference(type = com.dasannetworks.tms.sb.service.FooService.class)
    protected com.dasannetworks.tms.sb.service.FooService fooService;
    @BeanReference(type = FooPersistence.class)
    protected FooPersistence fooPersistence;
    @BeanReference(type = com.dasannetworks.tms.sb.service.StudentLocalService.class)
    protected com.dasannetworks.tms.sb.service.StudentLocalService studentLocalService;
    @BeanReference(type = com.dasannetworks.tms.sb.service.StudentService.class)
    protected com.dasannetworks.tms.sb.service.StudentService studentService;
    @BeanReference(type = StudentPersistence.class)
    protected StudentPersistence studentPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ClassNameLocalService.class)
    protected com.liferay.portal.service.ClassNameLocalService classNameLocalService;
    @BeanReference(type = com.liferay.portal.service.ClassNameService.class)
    protected com.liferay.portal.service.ClassNameService classNameService;
    @BeanReference(type = ClassNamePersistence.class)
    protected ClassNamePersistence classNamePersistence;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portal.service.WorkflowDefinitionLinkLocalService.class)
    protected com.liferay.portal.service.WorkflowDefinitionLinkLocalService workflowDefinitionLinkLocalService;
    @BeanReference(type = WorkflowDefinitionLinkPersistence.class)
    protected WorkflowDefinitionLinkPersistence workflowDefinitionLinkPersistence;
    @BeanReference(type = com.liferay.portal.service.WorkflowInstanceLinkLocalService.class)
    protected com.liferay.portal.service.WorkflowInstanceLinkLocalService workflowInstanceLinkLocalService;
    @BeanReference(type = WorkflowInstanceLinkPersistence.class)
    protected WorkflowInstanceLinkPersistence workflowInstanceLinkPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.expando.service.ExpandoRowLocalService.class)
    protected com.liferay.portlet.expando.service.ExpandoRowLocalService expandoRowLocalService;
    @BeanReference(type = ExpandoRowPersistence.class)
    protected ExpandoRowPersistence expandoRowPersistence;
    @BeanReference(type = com.liferay.portlet.expando.service.ExpandoTableLocalService.class)
    protected com.liferay.portlet.expando.service.ExpandoTableLocalService expandoTableLocalService;
    @BeanReference(type = ExpandoTablePersistence.class)
    protected ExpandoTablePersistence expandoTablePersistence;
    @BeanReference(type = com.liferay.portlet.expando.service.ExpandoValueLocalService.class)
    protected com.liferay.portlet.expando.service.ExpandoValueLocalService expandoValueLocalService;
    @BeanReference(type = com.liferay.portlet.expando.service.ExpandoValueService.class)
    protected com.liferay.portlet.expando.service.ExpandoValueService expandoValueService;
    @BeanReference(type = ExpandoValuePersistence.class)
    protected ExpandoValuePersistence expandoValuePersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private FeedbackLocalServiceClpInvoker _clpInvoker = new FeedbackLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link com.dasannetworks.tms.sb.service.FeedbackLocalServiceUtil} to access the feedback local service.
     */

    /**
     * Adds the feedback to the database. Also notifies the appropriate model listeners.
     *
     * @param feedback the feedback
     * @return the feedback that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Feedback addFeedback(Feedback feedback) throws SystemException {
        feedback.setNew(true);

        return feedbackPersistence.update(feedback);
    }

    /**
     * Creates a new feedback with the primary key. Does not add the feedback to the database.
     *
     * @param feedbackId the primary key for the new feedback
     * @return the new feedback
     */
    @Override
    public Feedback createFeedback(long feedbackId) {
        return feedbackPersistence.create(feedbackId);
    }

    /**
     * Deletes the feedback with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param feedbackId the primary key of the feedback
     * @return the feedback that was removed
     * @throws PortalException if a feedback with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Feedback deleteFeedback(long feedbackId)
        throws PortalException, SystemException {
        return feedbackPersistence.remove(feedbackId);
    }

    /**
     * Deletes the feedback from the database. Also notifies the appropriate model listeners.
     *
     * @param feedback the feedback
     * @return the feedback that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Feedback deleteFeedback(Feedback feedback) throws SystemException {
        return feedbackPersistence.remove(feedback);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Feedback.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return feedbackPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dasannetworks.tms.sb.model.impl.FeedbackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return feedbackPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dasannetworks.tms.sb.model.impl.FeedbackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return feedbackPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return feedbackPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return feedbackPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Feedback fetchFeedback(long feedbackId) throws SystemException {
        return feedbackPersistence.fetchByPrimaryKey(feedbackId);
    }

    /**
     * Returns the feedback with the matching UUID and company.
     *
     * @param uuid the feedback's UUID
     * @param  companyId the primary key of the company
     * @return the matching feedback, or <code>null</code> if a matching feedback could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Feedback fetchFeedbackByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return feedbackPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the feedback matching the UUID and group.
     *
     * @param uuid the feedback's UUID
     * @param groupId the primary key of the group
     * @return the matching feedback, or <code>null</code> if a matching feedback could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Feedback fetchFeedbackByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return feedbackPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the feedback with the primary key.
     *
     * @param feedbackId the primary key of the feedback
     * @return the feedback
     * @throws PortalException if a feedback with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Feedback getFeedback(long feedbackId)
        throws PortalException, SystemException {
        return feedbackPersistence.findByPrimaryKey(feedbackId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return feedbackPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the feedback with the matching UUID and company.
     *
     * @param uuid the feedback's UUID
     * @param  companyId the primary key of the company
     * @return the matching feedback
     * @throws PortalException if a matching feedback could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Feedback getFeedbackByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return feedbackPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the feedback matching the UUID and group.
     *
     * @param uuid the feedback's UUID
     * @param groupId the primary key of the group
     * @return the matching feedback
     * @throws PortalException if a matching feedback could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Feedback getFeedbackByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return feedbackPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the feedbacks.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.dasannetworks.tms.sb.model.impl.FeedbackModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of feedbacks
     * @param end the upper bound of the range of feedbacks (not inclusive)
     * @return the range of feedbacks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Feedback> getFeedbacks(int start, int end)
        throws SystemException {
        return feedbackPersistence.findAll(start, end);
    }

    /**
     * Returns the number of feedbacks.
     *
     * @return the number of feedbacks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getFeedbacksCount() throws SystemException {
        return feedbackPersistence.countAll();
    }

    /**
     * Updates the feedback in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param feedback the feedback
     * @return the feedback that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Feedback updateFeedback(Feedback feedback) throws SystemException {
        return feedbackPersistence.update(feedback);
    }

    /**
     * Returns the book local service.
     *
     * @return the book local service
     */
    public com.dasannetworks.tms.sb.service.BookLocalService getBookLocalService() {
        return bookLocalService;
    }

    /**
     * Sets the book local service.
     *
     * @param bookLocalService the book local service
     */
    public void setBookLocalService(
        com.dasannetworks.tms.sb.service.BookLocalService bookLocalService) {
        this.bookLocalService = bookLocalService;
    }

    /**
     * Returns the book remote service.
     *
     * @return the book remote service
     */
    public com.dasannetworks.tms.sb.service.BookService getBookService() {
        return bookService;
    }

    /**
     * Sets the book remote service.
     *
     * @param bookService the book remote service
     */
    public void setBookService(
        com.dasannetworks.tms.sb.service.BookService bookService) {
        this.bookService = bookService;
    }

    /**
     * Returns the book persistence.
     *
     * @return the book persistence
     */
    public BookPersistence getBookPersistence() {
        return bookPersistence;
    }

    /**
     * Sets the book persistence.
     *
     * @param bookPersistence the book persistence
     */
    public void setBookPersistence(BookPersistence bookPersistence) {
        this.bookPersistence = bookPersistence;
    }

    /**
     * Returns the contact local service.
     *
     * @return the contact local service
     */
    public com.dasannetworks.tms.sb.service.ContactLocalService getContactLocalService() {
        return contactLocalService;
    }

    /**
     * Sets the contact local service.
     *
     * @param contactLocalService the contact local service
     */
    public void setContactLocalService(
        com.dasannetworks.tms.sb.service.ContactLocalService contactLocalService) {
        this.contactLocalService = contactLocalService;
    }

    /**
     * Returns the contact remote service.
     *
     * @return the contact remote service
     */
    public com.dasannetworks.tms.sb.service.ContactService getContactService() {
        return contactService;
    }

    /**
     * Sets the contact remote service.
     *
     * @param contactService the contact remote service
     */
    public void setContactService(
        com.dasannetworks.tms.sb.service.ContactService contactService) {
        this.contactService = contactService;
    }

    /**
     * Returns the contact persistence.
     *
     * @return the contact persistence
     */
    public ContactPersistence getContactPersistence() {
        return contactPersistence;
    }

    /**
     * Sets the contact persistence.
     *
     * @param contactPersistence the contact persistence
     */
    public void setContactPersistence(ContactPersistence contactPersistence) {
        this.contactPersistence = contactPersistence;
    }

    /**
     * Returns the device local service.
     *
     * @return the device local service
     */
    public com.dasannetworks.tms.sb.service.DeviceLocalService getDeviceLocalService() {
        return deviceLocalService;
    }

    /**
     * Sets the device local service.
     *
     * @param deviceLocalService the device local service
     */
    public void setDeviceLocalService(
        com.dasannetworks.tms.sb.service.DeviceLocalService deviceLocalService) {
        this.deviceLocalService = deviceLocalService;
    }

    /**
     * Returns the device remote service.
     *
     * @return the device remote service
     */
    public com.dasannetworks.tms.sb.service.DeviceService getDeviceService() {
        return deviceService;
    }

    /**
     * Sets the device remote service.
     *
     * @param deviceService the device remote service
     */
    public void setDeviceService(
        com.dasannetworks.tms.sb.service.DeviceService deviceService) {
        this.deviceService = deviceService;
    }

    /**
     * Returns the device persistence.
     *
     * @return the device persistence
     */
    public DevicePersistence getDevicePersistence() {
        return devicePersistence;
    }

    /**
     * Sets the device persistence.
     *
     * @param devicePersistence the device persistence
     */
    public void setDevicePersistence(DevicePersistence devicePersistence) {
        this.devicePersistence = devicePersistence;
    }

    /**
     * Returns the feedback local service.
     *
     * @return the feedback local service
     */
    public com.dasannetworks.tms.sb.service.FeedbackLocalService getFeedbackLocalService() {
        return feedbackLocalService;
    }

    /**
     * Sets the feedback local service.
     *
     * @param feedbackLocalService the feedback local service
     */
    public void setFeedbackLocalService(
        com.dasannetworks.tms.sb.service.FeedbackLocalService feedbackLocalService) {
        this.feedbackLocalService = feedbackLocalService;
    }

    /**
     * Returns the feedback remote service.
     *
     * @return the feedback remote service
     */
    public com.dasannetworks.tms.sb.service.FeedbackService getFeedbackService() {
        return feedbackService;
    }

    /**
     * Sets the feedback remote service.
     *
     * @param feedbackService the feedback remote service
     */
    public void setFeedbackService(
        com.dasannetworks.tms.sb.service.FeedbackService feedbackService) {
        this.feedbackService = feedbackService;
    }

    /**
     * Returns the feedback persistence.
     *
     * @return the feedback persistence
     */
    public FeedbackPersistence getFeedbackPersistence() {
        return feedbackPersistence;
    }

    /**
     * Sets the feedback persistence.
     *
     * @param feedbackPersistence the feedback persistence
     */
    public void setFeedbackPersistence(FeedbackPersistence feedbackPersistence) {
        this.feedbackPersistence = feedbackPersistence;
    }

    /**
     * Returns the foo local service.
     *
     * @return the foo local service
     */
    public com.dasannetworks.tms.sb.service.FooLocalService getFooLocalService() {
        return fooLocalService;
    }

    /**
     * Sets the foo local service.
     *
     * @param fooLocalService the foo local service
     */
    public void setFooLocalService(
        com.dasannetworks.tms.sb.service.FooLocalService fooLocalService) {
        this.fooLocalService = fooLocalService;
    }

    /**
     * Returns the foo remote service.
     *
     * @return the foo remote service
     */
    public com.dasannetworks.tms.sb.service.FooService getFooService() {
        return fooService;
    }

    /**
     * Sets the foo remote service.
     *
     * @param fooService the foo remote service
     */
    public void setFooService(
        com.dasannetworks.tms.sb.service.FooService fooService) {
        this.fooService = fooService;
    }

    /**
     * Returns the foo persistence.
     *
     * @return the foo persistence
     */
    public FooPersistence getFooPersistence() {
        return fooPersistence;
    }

    /**
     * Sets the foo persistence.
     *
     * @param fooPersistence the foo persistence
     */
    public void setFooPersistence(FooPersistence fooPersistence) {
        this.fooPersistence = fooPersistence;
    }

    /**
     * Returns the student local service.
     *
     * @return the student local service
     */
    public com.dasannetworks.tms.sb.service.StudentLocalService getStudentLocalService() {
        return studentLocalService;
    }

    /**
     * Sets the student local service.
     *
     * @param studentLocalService the student local service
     */
    public void setStudentLocalService(
        com.dasannetworks.tms.sb.service.StudentLocalService studentLocalService) {
        this.studentLocalService = studentLocalService;
    }

    /**
     * Returns the student remote service.
     *
     * @return the student remote service
     */
    public com.dasannetworks.tms.sb.service.StudentService getStudentService() {
        return studentService;
    }

    /**
     * Sets the student remote service.
     *
     * @param studentService the student remote service
     */
    public void setStudentService(
        com.dasannetworks.tms.sb.service.StudentService studentService) {
        this.studentService = studentService;
    }

    /**
     * Returns the student persistence.
     *
     * @return the student persistence
     */
    public StudentPersistence getStudentPersistence() {
        return studentPersistence;
    }

    /**
     * Sets the student persistence.
     *
     * @param studentPersistence the student persistence
     */
    public void setStudentPersistence(StudentPersistence studentPersistence) {
        this.studentPersistence = studentPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the class name local service.
     *
     * @return the class name local service
     */
    public com.liferay.portal.service.ClassNameLocalService getClassNameLocalService() {
        return classNameLocalService;
    }

    /**
     * Sets the class name local service.
     *
     * @param classNameLocalService the class name local service
     */
    public void setClassNameLocalService(
        com.liferay.portal.service.ClassNameLocalService classNameLocalService) {
        this.classNameLocalService = classNameLocalService;
    }

    /**
     * Returns the class name remote service.
     *
     * @return the class name remote service
     */
    public com.liferay.portal.service.ClassNameService getClassNameService() {
        return classNameService;
    }

    /**
     * Sets the class name remote service.
     *
     * @param classNameService the class name remote service
     */
    public void setClassNameService(
        com.liferay.portal.service.ClassNameService classNameService) {
        this.classNameService = classNameService;
    }

    /**
     * Returns the class name persistence.
     *
     * @return the class name persistence
     */
    public ClassNamePersistence getClassNamePersistence() {
        return classNamePersistence;
    }

    /**
     * Sets the class name persistence.
     *
     * @param classNamePersistence the class name persistence
     */
    public void setClassNamePersistence(
        ClassNamePersistence classNamePersistence) {
        this.classNamePersistence = classNamePersistence;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the workflow definition link local service.
     *
     * @return the workflow definition link local service
     */
    public com.liferay.portal.service.WorkflowDefinitionLinkLocalService getWorkflowDefinitionLinkLocalService() {
        return workflowDefinitionLinkLocalService;
    }

    /**
     * Sets the workflow definition link local service.
     *
     * @param workflowDefinitionLinkLocalService the workflow definition link local service
     */
    public void setWorkflowDefinitionLinkLocalService(
        com.liferay.portal.service.WorkflowDefinitionLinkLocalService workflowDefinitionLinkLocalService) {
        this.workflowDefinitionLinkLocalService = workflowDefinitionLinkLocalService;
    }

    /**
     * Returns the workflow definition link persistence.
     *
     * @return the workflow definition link persistence
     */
    public WorkflowDefinitionLinkPersistence getWorkflowDefinitionLinkPersistence() {
        return workflowDefinitionLinkPersistence;
    }

    /**
     * Sets the workflow definition link persistence.
     *
     * @param workflowDefinitionLinkPersistence the workflow definition link persistence
     */
    public void setWorkflowDefinitionLinkPersistence(
        WorkflowDefinitionLinkPersistence workflowDefinitionLinkPersistence) {
        this.workflowDefinitionLinkPersistence = workflowDefinitionLinkPersistence;
    }

    /**
     * Returns the workflow instance link local service.
     *
     * @return the workflow instance link local service
     */
    public com.liferay.portal.service.WorkflowInstanceLinkLocalService getWorkflowInstanceLinkLocalService() {
        return workflowInstanceLinkLocalService;
    }

    /**
     * Sets the workflow instance link local service.
     *
     * @param workflowInstanceLinkLocalService the workflow instance link local service
     */
    public void setWorkflowInstanceLinkLocalService(
        com.liferay.portal.service.WorkflowInstanceLinkLocalService workflowInstanceLinkLocalService) {
        this.workflowInstanceLinkLocalService = workflowInstanceLinkLocalService;
    }

    /**
     * Returns the workflow instance link persistence.
     *
     * @return the workflow instance link persistence
     */
    public WorkflowInstanceLinkPersistence getWorkflowInstanceLinkPersistence() {
        return workflowInstanceLinkPersistence;
    }

    /**
     * Sets the workflow instance link persistence.
     *
     * @param workflowInstanceLinkPersistence the workflow instance link persistence
     */
    public void setWorkflowInstanceLinkPersistence(
        WorkflowInstanceLinkPersistence workflowInstanceLinkPersistence) {
        this.workflowInstanceLinkPersistence = workflowInstanceLinkPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the expando row local service.
     *
     * @return the expando row local service
     */
    public com.liferay.portlet.expando.service.ExpandoRowLocalService getExpandoRowLocalService() {
        return expandoRowLocalService;
    }

    /**
     * Sets the expando row local service.
     *
     * @param expandoRowLocalService the expando row local service
     */
    public void setExpandoRowLocalService(
        com.liferay.portlet.expando.service.ExpandoRowLocalService expandoRowLocalService) {
        this.expandoRowLocalService = expandoRowLocalService;
    }

    /**
     * Returns the expando row persistence.
     *
     * @return the expando row persistence
     */
    public ExpandoRowPersistence getExpandoRowPersistence() {
        return expandoRowPersistence;
    }

    /**
     * Sets the expando row persistence.
     *
     * @param expandoRowPersistence the expando row persistence
     */
    public void setExpandoRowPersistence(
        ExpandoRowPersistence expandoRowPersistence) {
        this.expandoRowPersistence = expandoRowPersistence;
    }

    /**
     * Returns the expando table local service.
     *
     * @return the expando table local service
     */
    public com.liferay.portlet.expando.service.ExpandoTableLocalService getExpandoTableLocalService() {
        return expandoTableLocalService;
    }

    /**
     * Sets the expando table local service.
     *
     * @param expandoTableLocalService the expando table local service
     */
    public void setExpandoTableLocalService(
        com.liferay.portlet.expando.service.ExpandoTableLocalService expandoTableLocalService) {
        this.expandoTableLocalService = expandoTableLocalService;
    }

    /**
     * Returns the expando table persistence.
     *
     * @return the expando table persistence
     */
    public ExpandoTablePersistence getExpandoTablePersistence() {
        return expandoTablePersistence;
    }

    /**
     * Sets the expando table persistence.
     *
     * @param expandoTablePersistence the expando table persistence
     */
    public void setExpandoTablePersistence(
        ExpandoTablePersistence expandoTablePersistence) {
        this.expandoTablePersistence = expandoTablePersistence;
    }

    /**
     * Returns the expando value local service.
     *
     * @return the expando value local service
     */
    public com.liferay.portlet.expando.service.ExpandoValueLocalService getExpandoValueLocalService() {
        return expandoValueLocalService;
    }

    /**
     * Sets the expando value local service.
     *
     * @param expandoValueLocalService the expando value local service
     */
    public void setExpandoValueLocalService(
        com.liferay.portlet.expando.service.ExpandoValueLocalService expandoValueLocalService) {
        this.expandoValueLocalService = expandoValueLocalService;
    }

    /**
     * Returns the expando value remote service.
     *
     * @return the expando value remote service
     */
    public com.liferay.portlet.expando.service.ExpandoValueService getExpandoValueService() {
        return expandoValueService;
    }

    /**
     * Sets the expando value remote service.
     *
     * @param expandoValueService the expando value remote service
     */
    public void setExpandoValueService(
        com.liferay.portlet.expando.service.ExpandoValueService expandoValueService) {
        this.expandoValueService = expandoValueService;
    }

    /**
     * Returns the expando value persistence.
     *
     * @return the expando value persistence
     */
    public ExpandoValuePersistence getExpandoValuePersistence() {
        return expandoValuePersistence;
    }

    /**
     * Sets the expando value persistence.
     *
     * @param expandoValuePersistence the expando value persistence
     */
    public void setExpandoValuePersistence(
        ExpandoValuePersistence expandoValuePersistence) {
        this.expandoValuePersistence = expandoValuePersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("com.dasannetworks.tms.sb.model.Feedback",
            feedbackLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "com.dasannetworks.tms.sb.model.Feedback");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Feedback.class;
    }

    protected String getModelClassName() {
        return Feedback.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = feedbackPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
